/**
 * FTC Scoring display
 *
 * Works by loading the html generated by the Scoring Software, and refactoring it into a more
 * friendly display format - specifically for mobile devices.
 *
 * Where the data is loaded from is determined by the js/config.js file, and is passed into the
 * FTC constructor as the 'sources' variable.
 */

var FTC = function() {
	this.init();
}

FTC.prototype = {

	init: function() {
		var self = this;
		
		this.configModified = '',
		this.loading = false;
		this.division = '';
		this.dataType = '';
		this.selected = '';
		this.raw = '';
		this.seq = 0;
		
		this.isLocal = document.location.protocol == 'file:';
		
		
		this.canSaveData = false;
		this.hasLocalStorage = false;
		this.hasCookies = false;
		this.saveLocalData = function( key, value ) { }
		this.readLocalData = function( key ) { return null; }
		this.eraseLocalData = function( key ) { }
		
		this.testLocalStorage();
		
		$('header nav .types a').each(function(e){
			$(this).click( function(e) {
				self.loadDataType($(this).attr('id').replace('type-',''));
				e.preventDefault();
			});
		});
		
		$('#btn-refresh').click( function(e){ self.reload(); e.preventDefault(); } );
		
		var team = this.readLocalData( 'team' );
		if ( typeof(team) == 'string' ) {
			$('#team-input').val( team );
		}
		$('#team-input').change( function() {
			var team = $('#team-input').val();
			self.saveLocalData( 'team', team );
			self.reload();
		} );
		
		this.checkConfig();
	},
	
	checkConfig: function( continueLoading ) {
		var self = this;
		$.ajax({
			url: 'js/config.json?r=' + new Date().getTime(),
			success: function(data, ststus, jqXHR) {
				var modified = jqXHR.getResponseHeader("Last-Modified");
				if ( modified != self.configModified ) {
					self.configModified = modified;
					self.sources = data.sources;
					if ( data.divisions.length == 2 ) {
						var html = '';
						for ( var n = 0; n < 2; n++ ) {
							var division = data.divisions[n];
							html += '<li><a href="#" id="division-' + division.tag + '">' + division.name + '</a></il>';
						}
						$('ul.divisions').html( html );
					}
					else {
						if ( typeof(data.header) == 'string' && data.header.length > 0 ) {
							$('ul.divisions').html( '<h3>' + data.header + '</h3>' );
						}
						else {
							$('body').addClass('nodivisions');
						}
						if ( data.divisions.length == 1 ) {
							self.division = data.divisions[0].tag;
						}
						else {
							self.division = '';
						}
					}
					self.loading = false;
					self.firstLoad();
				}
				else if ( continueLoading ) {
					self.continueReload();
				}
			},
			error: function(jqXHR, status, error) {
				if ( continueLoading ) {
					self.continueReload();
				}
			}
		});
	},
	
	firstLoad: function() {
		var self = this;
		$('header nav .divisions a').each(function(){
			$(this).click( function(e) {
				self.loadDivision($(this).attr('id').replace('division-',''))
				e.preventDefault();
			});
		});
		
		var firstSource = '';
		for ( var k in this.sources ) {
			firstSource = k;
			break;
		}
		var which = this.readLocalData( 'which' );
		if ( typeof(which) == 'string' ) {
			if ( (which.indexOf('-') == -1) != (firstSource.indexOf('-') == -1) ) {
				which = firstSource;
			}
			this.load( which );
		}
		else {
			this.load( firstSource );
		}
	},
	
	load: function( which ) {
		var self = this;
		
		this.saveLocalData( 'which', which );
		this.selected = which;
		this.loading = false;
		
		if ( which.indexOf('-') != -1 ) {
			var split = which.split("-");
			this.division = split[0];
			this.dataType = split[1];
		}
		else {
			this.dataType = which;
		}
		
		$('header nav a').removeClass( 'selected' );
		$('#division-' + this.division).addClass( 'selected' );
		$('#type-' + this.dataType).addClass( 'selected' );
		
		this.reload();
	},
	
	loadDivision: function( which ) {
		this.division = which
		this.selected = this.division + '-' + this.dataType;
		this.saveLocalData( 'which', this.selected );
		
		$('header nav .divisions a').removeClass( 'selected' );
		$('#division-' + this.division).addClass( 'selected' );
		
		this.reload();
	},
	
	loadDataType: function( which ) {
		this.dataType = which
		if ( this.division.length > 0 ) {
			this.selected = this.division + '-' + this.dataType;
		}
		else {
			this.selected = this.dataType;
		}
		this.saveLocalData( 'which', this.selected );
		
		$('header nav .types a').removeClass( 'selected' );
		$('#type-' + this.dataType).addClass( 'selected' );
		
		this.reload();
	},
	
	reload: function() {
		var self = this;
		
		if ( this.loading ) {
			return;
		}
		
		clearTimeout( self.timeoutId );
		this.loading = true;
		this.seq = new Date().getTime();
		
		$('#content').append( '<div id="load-indicator"></div>' );
		
		this.checkConfig( true );
	},
	
	continueReload: function() {
		var self = this;
		
		if ( this.selected.indexOf('results') != -1 ) {
			this.reloadDetails();
		}
		
		var $new = $( '<div></div>' );
		var url = this.sources[this.selected];
		if ( !this.isLocal ) {
			url += '?_=' + this.seq;
		}
		$new.load( url, function(responseText, textStatus, jqXHR) {
			self.raw = $new.get(0).innerHTML;
			
			var $c = $('#content');
			$c.html( $new );
			
			$c.find('p').each(function() {
				if ( $(this).text().indexOf('Refresh page') == 0 ) {
					$(this).remove();
				}
				else if ( $(this).text().indexOf('Return to') == 0 ) {
					$(this).remove();
				}
			});
			$c.find( 'meta[HTTP-EQUIV="REFRESH"]' ).remove();
			$c.find( 'style,title' ).remove();
			$c.find( 'center:nth-child(1)' ).remove();
			
			if ( self.selected.indexOf('results') != -1 ) {
				$c.find( 'td[bgcolor="#CCCCCC"]' ).removeAttr( 'bgcolor' );
				$c.find( 'td[bgcolor="#FFFFFF"]' ).removeAttr( 'bgcolor' );
				$c.find( 'td[bgcolor="#44AAFF"]' ).removeAttr( 'bgcolor' ).addClass('blue-won');
				$c.find( 'td[bgcolor="#FF4444"]' ).removeAttr( 'bgcolor' ).addClass('red-won');
				var odd = 0;
				$c.find( 'table tr' ).each( function(idx) {
					if ( idx >= 0 ) {
						rowspan = $(this).find( 'td:nth-child(1)').attr('ROWSPAN');
						if ( typeof(rowspan) == 'string' ) {
							odd = 1 - odd;
							$(this).addClass( 'sep' );
							$(this).find( 'td:nth-child(3)').addClass( 'red' );
							$(this).find( 'td:nth-child(4)').addClass( 'blue' );
						}
						else {
							$(this).find( 'td:nth-child(1)').addClass( 'red' );
							$(this).find( 'td:nth-child(2)').addClass( 'blue' );
						}
						if ( odd ) {
							$(this).addClass( 'odd' );
						}
						var $winner = $(this).find('.red-won,.blue-won');
						if ( $winner.length > 0 ) {
							var match = $(this).find( 'td:nth-child(1)').text();
							$(this).click(function(e){
								self.showDetails(match);
							});
						}
					}
				});
			}
			else {
				$c.find( 'td[bgcolor="#CCCCCC"]' ).removeAttr( 'bgcolor' );
				$c.find( 'td[bgcolor="#FFFFFF"]' ).removeAttr( 'bgcolor' );
				$c.find( 'td[bgcolor="#44AAFF"]' ).removeAttr( 'bgcolor' ).addClass('blue-won');
				$c.find( 'td[bgcolor="#FF4444"]' ).removeAttr( 'bgcolor' ).addClass('red-won');
				$c.find( 'table tr' ).each( function(idx) {
					if ( idx %2 == 1 ) {
						$(this).addClass( 'odd' );
					}
				});
				$c.find( 'td[bgcolor="#EBBC28"]' ).parents('tr').removeClass('odd').addClass('dayhead');
			}
			
			if ( self.selected.indexOf('rankings') != -1 ) {
				var $headrow = $c.find( 'table tr:nth-child(1)' );
				$headrow.find( 'th:nth-child(6)').text( 'High' );
			}
			
			$c.find( 'table' ).addClass( self.dataType );
			
			/**
			 * Match List
			 */
			if ( self.selected.indexOf('matches') != -1 ) {
				if ( $c.find('table tr:nth-child(1) th').size() == 6 ) {
					// Match times are included
					$c.find( 'tr td:nth-child(3), tr td:nth-child(4)').addClass( 'red' );
					$c.find( 'tr td:nth-child(5), tr td:nth-child(6)').addClass( 'blue' );
				}
				else {
					// No match times found
					$c.find( 'tr td:nth-child(2), tr td:nth-child(3)').addClass( 'red' );
					$c.find( 'tr td:nth-child(4), tr td:nth-child(5)').addClass( 'blue' );
				}
			}
			
			if ( self.selected.indexOf('details') != -1 ) {
			
				// the html is malformed - there's a missing </ul>, so everything in in the <ul>.  fix it now:
				var $li = $c.find( 'li' ).detach();
				var $sub = $c.find( 'ul' ).children().detach();
				$c.find('ul').append( $li );
				$c.append( $sub );
				
				$c.find( 'colgroup' ).remove();
				var $headrow = $c.find( 'table tr:nth-child(1)' );
				
				var $table = $c.find( 'table');
				var odd = 0;
				$table.find( 'tr' ).each( function(idx) {
					if ( idx == 0 ) {
						$(this).html('<TH>&nbsp;</th><TH>&nbsp;</th><TH>&nbsp;</th><TH COLSPAN="6">Scores</TH>');
					}
					else if ( idx == 1 ) {
						$(this).html('<TH>Match</TH><TH>Result</TH><TH>Teams</TH><TH>Tot</TH><TH>Auto</TH><TH>AutoB</TH><TH>Tele</TH><TH>EndG</TH><TH>Pen</TH>');
					}
					if ( idx >= 2 ) { // skip two header rows
						var $tr = $(this);
						var $redTeams = $tr.find( 'td:nth-child(3)');
						$redTeams.text( 'R: ' + $redTeams.text() );
						$tr.find( 'td:nth-child(1),td:nth-child(2)').attr( 'rowspan', '2' );
						var $blue = $('<tr></tr>');
						var $td = $tr.find('td');
						
						var $blueTeams = $td.slice(3, 4).addClass( 'blue' ).detach();
						$blueTeams.text( 'B: ' + $blueTeams.text() );
						$blue.append( $blueTeams );
						$blue.append( $td.slice(10).addClass( 'blue' ).detach() );
						$td.slice(2).addClass('red');
						$tr.addClass('sep').after( $blue );
						if ( odd == 1 ) {
							$tr.addClass( 'odd' );
							$blue.addClass( 'odd' );
						}
						odd = 1 - odd;
					}
				});
			}
			
			self.highlightTeam();
			var now = new Date();
			$('#timestamp').text( now.toLocaleString() );
			self.loading = false;
			self.timeoutId = setTimeout( function(){ self.reload(); }, 5 * 60 * 1000 );	// 5  minutes
		});
	},
	
	
	/**
	 * showDetails
	 *
	 * Appends a modal div that shows the detailed results of a match
	 * The detail data is grabbed from the "details" dictionary.
	 */
	showDetails: function( match ) {
		if ( this.details && typeof(this.details[match]) == 'object' ) {
			var data = this.details[match];
			var html = '<div id="detail-back"><div id="detail-box">';
			var winner = data.result.indexOf('B') != -1 ? 'blue' : 'red';
			var red_teams = data.rteams.split(" ");
			var blue_teams = data.bteams.split(" ");
			html += '<h2 class="' + winner + '-won">Match ' + match + '</h2>';
			html += '<h3 class="' + winner + '-won">' + data.result + '</h3>';
			html += '<table><tr><th>&nbsp;</th><th class="red">Red</th><th class="blue">Blue<th></tr>';
			html += '<tr class="odd sep"><td>Teams</td><td class="red"><strong>' + red_teams[0];
			for (var i=1, len = red_teams.length; i < len; i++) {
				html += '<br>' + red_teams[i];
			}
			html += '</strong></td><td class="blue"><strong>' + blue_teams[0];
			for (var i=1, len = blue_teams.length; i < len; i++) {
				html += '<br>' + blue_teams[i];
			}
			html += '</strong></td></tr>';
			//html += '<tr class="odd sep"><td>Teams</td><td class="red"><strong>' + data.rteams + '</strong></td><td class="blue"><strong>' + data.bteams + '</strong></td></tr>';
			html += '<tr><td>Total Score</td><td class="red">' + data.rtotal + '</td><td class="blue">' + data.btotal + '</td></tr>';
			html += '<tr class="odd"><td>Autonomous</td><td class="red">' + data.rauto + '</td><td class="blue">' + data.bauto + '</td></tr>';
			html += '<tr><td>Auto Bonus</td><td class="red">' + data.rautob + '</td><td class="blue">' + data.bautob + '</td></tr>';
			html += '<tr class="odd"><td>Tele-Op</td><td class="red">' + data.rtele + '</td><td class="blue">' + data.btele + '</td></tr>';
			html += '<tr><td>End Game</td><td class="red">' + data.rend + '</td><td class="blue">' + data.bend + '</td></tr>';
			html += '<tr class="odd"><td>Penalties</td><td class="red">' + data.rpen + '</td><td class="blue">' + data.bpen + '</td></tr>';
			html += '</table></div></div>';
			$('body').append( html );
			
			$('#detail-back').click(function() { $(this).remove(); });
		}
	},
	
	
	/**
	 * reloadDetails
	 *
	 * Re-loads the "match results with details" html file, and caches the data in a js dictionary,
	 * using the match name as the key:
	 *	details: {
	 *		"Q-1":{ result:"...", rteams:"...", etc. },
	 *		"Q-2":{ result:"...", rteams:"...", etc. },
	 *	}
	 */
	reloadDetails: function() {
		var self = this;
		
		$('#content').append( '<div id="load-indicator"></div>' );
		
		var $new = $( '<div></div>' );
		var which = 'details';
		if ( this.selected.indexOf('-') != -1 ) {
			which = this.division + '-details';
		}
		var url = this.sources[which];
		if ( !this.isLocal ) {
			url += '?_=' + new Date().getTime();
		}
		$new.load( url, function(responseText, textStatus, jqXHR) {
			var details = {};
			
			$new.find('tr').each(function(idx) {
				if ( idx < 2 ) return;
				var $td = $(this).find('td');
				if ( $td.size() == 16 ) {
					details[ $($td.get(0)).text() ] = {
						result: $($td.get(1)).text(),
						rteams: $($td.get(2)).text(),
						rtotal: $($td.get(4)).text(),
						rauto: $($td.get(5)).text(),
						rautob: $($td.get(6)).text(),
						rtele: $($td.get(7)).text(),
						rend: $($td.get(8)).text(),
						rpen: $($td.get(9)).text(),
						bteams: $($td.get(3)).text(),
						btotal: $($td.get(10)).text(),
						bauto: $($td.get(11)).text(),
						bautob: $($td.get(12)).text(),
						btele: $($td.get(13)).text(),
						bend: $($td.get(14)).text(),
						bpen: $($td.get(15)).text(),
					}
				}
			});
			
			self.details = details;
		});
	},
	
	highlightTeam: function() {
		var self = this;
		
		var team = $('#team-input').val();
		var $content = $('#content');
		
		$content.SearchHighlight({ exact:'partial', style_name_suffix:false, keys:team });
		$('#content .hilite').parents('tr').addClass('hirow');
		//$('#content').html( this.raw.replace(team, '<span class="highlight">' + team + '</span>') );
	},
	
	testLocalStorage: function()
	{
		if ( typeof(Storage) !== 'undefined' ) {
			try {
				localStorage.setItem( 'l0calTe5t', 'works' );
				if ( localStorage.getItem('l0calTe5t') === 'works' ) {
					this.hasLocalStorage = true;
				}
				localStorage.removeItem( 'l0calTe5t' );
			}
			catch (e) {
			}
		}
		
		if ( this.hasLocalStorage ) {
			this.saveLocalData = function( key, value ) {
				localStorage.setItem( 'ftc_' + key, value );
			}
			this.readLocalData = function( key ) {
				return localStorage.getItem( 'ftc_' + key );
			}
			this.eraseLocalData = function( key ) {
				localStorage.removeItem( 'ftc_' + key );
			}
		}
		
		else {
			document.cookie = 'c0okietest=works';
			
			var readCookie = function( key ) {
				var ca = document.cookie.split( ';' );
				var nameEQ = key + '=';
				for(var i=0; i < ca.length; i++) {
					var c = ca[i];
					while (c.charAt(0)==' ') c = c.substring(1, c.length); //delete spaces
					if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
				}
				return null;
			}
			
			var val = readCookie( 'c0okietest' );
			if ( val === 'works' ) {
				this.hasCookies = true;
				document.cookie = 'c0okietest=; expires=Thu, 01 Jan 1970 00:00:00 UTC';
			}
			
			if ( this.hasCookies ) {
				this.saveLocalData = function( key, value, days ) {
					if ( typeof(days) == 'undefined' ) {
						days = 30;
					}
					if ( days != 0 ) {
						var date = new Date();
						date.setTime( date.getTime()+(days*24*60*60*1000) );
						var expires = '; expires=' + date.toGMTString();
					}
					else var expires = '';
					document.cookie = key + '=' + value + expires + '; path=/';
				}
				this.readLocalData = readCookie;
				this.eraseLocalData = function( key ) {
					document.cookie = key + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC';
				}
			}
		}
		
		this.canSaveData = this.hasLocalStorage || this.hasCookies;
	}
}


$(document).ready(function(){
	var ftc = new FTC();
});